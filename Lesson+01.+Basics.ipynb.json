{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Basics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In order to add comments in your code, you may use the hash charachter (#) followed by your comment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# This is a comment example\n",
    "# I can add as many as I want\n",
    "# It's a good way to make your code more readable by others"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To define variables in Python, you need to give a variable name followed by an equal operator, followed by the value itself.\n",
    "\n",
    "** In Python, you don't need to have any special charachter to declare the end of the your statement/code line"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Example of variable called i and has numeric value of 100\n",
    "i = 100\n",
    "\n",
    "# You may change variable value at any moment\n",
    "i = 150"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To print out on screen anything, you may use the function \"print()\". It's very usable approach to have print function throughout the code, as it helps you in seeing the current results of your code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "150\n"
     ]
    }
   ],
   "source": [
    "# The following statement will print the value of the variable i which we defined in \"In [1]\"\n",
    "print(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data types in Python are automatically assigned based on the value. For instance, you may have strings, integers and floats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The following are the values for myInt, myFloat and myString:\n",
      "12\n",
      "1.43\n",
      "Issam\n"
     ]
    }
   ],
   "source": [
    "# This is integer variable assinged to a variable called myInt\n",
    "myInt = 12\n",
    "# This is float\n",
    "myFloat = 1.43\n",
    "# This is string\n",
    "myString = \"Issam\"\n",
    "\n",
    "# Let's print those on screen using the print function that we've just learned\n",
    "print (\"The following are the values for myInt, myFloat and myString:\")\n",
    "print (myInt)\n",
    "print (myFloat)\n",
    "print (myString)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you want to get the data type for any given variables or value, you may use the function \"type()\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The following is the datatype for myString variable\n",
      "<class 'str'>\n"
     ]
    }
   ],
   "source": [
    "# Let's get the data type of our variable myString and print it\n",
    "print(\"The following is the datatype for myString variable\")\n",
    "print(type(myString))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You may perform any sort of arithmetic operations in Python such +, -, / and *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The following is the value of result variable:\n",
      "1797\n"
     ]
    }
   ],
   "source": [
    "# Let's multiply variable i by variable myInt and substract 3 from them. We'll assign the result to a new variable \n",
    "# called result\n",
    "result = i * myInt - 3\n",
    "print(\"The following is the value of result variable:\")\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you ever need to convert the data type of any value/variable, you may use the corresponding data type class to do so. \n",
    "\n",
    "** To concatinate strings in Python, you may use + sign"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'str'>\n",
      "And the value is 150\n",
      "<class 'int'>\n",
      "And the value is 150\n",
      "The type for myNewFloat is <class 'float'>\n",
      "And the value is 150.0\n"
     ]
    }
   ],
   "source": [
    "# To convert integer variable to string, we wold use \"str()\" function. Here we will convert variable i to a string \n",
    "# and store the result in a variable called myNewString\n",
    "myNewString = str(i)\n",
    "print (type(myNewString)) # This will print the data type for us to see\n",
    "print (\"And the value is \" + myNewString)\n",
    "\n",
    "# To convert string oject to int, we would use the int() function\n",
    "myNewInt = int(myNewString)\n",
    "print(type(myNewInt))\n",
    "print(\"And the value is \" +  str(myNewInt)) \n",
    "# Note: We converted the value to String ONLY for printing purposes, since the passed value\n",
    "# to print function should be of same data type\n",
    "\n",
    "# To convert to float, we'd use float() function\n",
    "myNewFloat = float(i)\n",
    "print(\"The type for myNewFloat is \" + str(type(myNewFloat)))\n",
    "print(\"And the value is \" + str(myNewFloat))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Python has data type \"list\", which is pretty much an array, or a sequence of values. You may define a list by having the values within brackets []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'list'>\n"
     ]
    }
   ],
   "source": [
    "# Empty list\n",
    "myList3 = []\n",
    "# or\n",
    "myList3 = list()\n",
    "\n",
    "# Lists with pre-defined values\n",
    "myList1 = [1,2,3,4,5,6,7]\n",
    "print(type(myList1)) # To check the data type of our list\n",
    "\n",
    "# List that has different data types content, like int and string\n",
    "myList2 = [1,\"Issam\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You may perform opersations on Python lists such dynamic value appending, slicing, value extraction and more. This is very useful and make the foundation for many of our next notebooks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The lists content are:\n",
      "[1, 2, 3, 4, 5, 6, 7, 4]\n",
      "[1, 'Issam', [1, 2, 3, 4, 5, 6, 7, 4]]\n",
      "[[1, 2, 3]]\n",
      "myList2[1]: Issam\n",
      "MyList2[2][1]: 2\n",
      "MyList2 Length: 3\n",
      "[4, 5]\n",
      "[4, 5, 6, 7, 4]\n",
      "['New Value', 2, 3, 4, 5, 6, 7, 4]\n"
     ]
    }
   ],
   "source": [
    "# To append values to a list, use the list function \".append()\"\n",
    "myList1.append(4)\n",
    "\n",
    "# Appending a list (as an element) to a list (list within list)\n",
    "myList2.append(myList1)\n",
    "myList3.append([1,2,3])\n",
    "\n",
    "print(\"The lists content are:\")\n",
    "print(myList1)\n",
    "print(myList2)\n",
    "print(myList3)\n",
    "\n",
    "# To extract a specific value in a list, you may use the element index\n",
    "print(\"myList2[1]: \" + str(myList2[1])) # We used index 1, which is the SECOND value in the list. For first value, use index 0\n",
    "\n",
    "# To get into an inner value within the list, like we have in myList\n",
    "print(\"MyList2[2][1]: \" + str(myList2[2][1]))\n",
    "\n",
    "# To get a length of a list, you may use the len() function\n",
    "print(\"MyList2 Length: \" + str(len(myList2))) # the objets are \"1\", \"Issam\" and the list \"[1,2,3,4]\"\n",
    "\n",
    "# To get range of values from a list, within two indexes (aka slicing)\n",
    "print(myList1[3:5])  # This would get value at index 3 and 4, but NOT 5\n",
    "print(myList1[3:len(myList1)]) # This would get value from index 3 through the last index\n",
    "\n",
    "# To change a value at specific index:\n",
    "myList1[0] = \"New Value\"\n",
    "print(myList1)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this notebook, we've learnt how to:\n",
    "\n",
    "1. Add comments in our code\n",
    "2. Define variables of different data types and change their values\n",
    "3. Check any variable data type\n",
    "4. Change data types\n",
    "5. Define list, access values, slice, add and manipulate values\n",
    "6. Peform basic arithmetic\n",
    "7. Use the print function"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
